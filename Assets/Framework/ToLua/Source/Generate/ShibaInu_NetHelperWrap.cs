//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ShibaInu_NetHelperWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("NetHelper");
		L.RegFunction("WatchNetTypeChange", WatchNetTypeChange);
		L.RegFunction("UnwathNetTypeChange", UnwathNetTypeChange);
		L.RegFunction("GetNetType", GetNetType);
		L.RegFunction("StartPing", StartPing);
		L.RegFunction("StopPing", StopPing);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WatchNetTypeChange(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				int o = ShibaInu.NetHelper.WatchNetTypeChange();
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 1)
			{
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
				int o = ShibaInu.NetHelper.WatchNetTypeChange(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ShibaInu.NetHelper.WatchNetTypeChange");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnwathNetTypeChange(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			int o = ShibaInu.NetHelper.UnwathNetTypeChange();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetNetType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			int o = ShibaInu.NetHelper.GetNetType();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartPing(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				ShibaInu.NetHelper.StartPing(arg0);
				return 0;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				ShibaInu.NetHelper.StartPing(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				ShibaInu.NetHelper.StartPing(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ShibaInu.NetHelper.StartPing");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopPing(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			ShibaInu.NetHelper.StopPing();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

