//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ShibaInu_LuaHelperWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(ShibaInu.LuaHelper), typeof(System.Object));
		L.RegFunction("IsDebug", IsDebug);
		L.RegFunction("GetVersionInfo", GetVersionInfo);
		L.RegFunction("SendMessageToNative", SendMessageToNative);
		L.RegFunction("DeviceVibrate", DeviceVibrate);
		L.RegFunction("Relaunch", Relaunch);
		L.RegFunction("CreateGameObject", CreateGameObject);
		L.RegFunction("SetLayerRecursively", SetLayerRecursively);
		L.RegFunction("DestroyChildren", DestroyChildren);
		L.RegFunction("WorldToCanvasPoint", WorldToCanvasPoint);
		L.RegFunction("ScreenToCanvasPoint", ScreenToCanvasPoint);
		L.RegFunction("GetShader", GetShader);
		L.RegFunction("AddOrGetComponent", AddOrGetComponent);
		L.RegFunction("GetMarkPointGameObject", GetMarkPointGameObject);
		L.RegFunction("SendHttpRequest", SendHttpRequest);
		L.RegFunction("AddDestroyEvent", AddDestroyEvent);
		L.RegFunction("AddPointerEvent", AddPointerEvent);
		L.RegFunction("AddDragDropEvent", AddDragDropEvent);
		L.RegFunction("AddAvailabilityEvent", AddAvailabilityEvent);
		L.RegFunction("AddTriggerEvent", AddTriggerEvent);
		L.RegFunction("PlayDoubleImageShake", PlayDoubleImageShake);
		L.RegFunction("PlayMosaic", PlayMosaic);
		L.RegFunction("PlayRadialBlur", PlayRadialBlur);
		L.RegFunction("SetGaussianBlurEnabled", SetGaussianBlurEnabled);
		L.RegFunction("New", _CreateShibaInu_LuaHelper);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateShibaInu_LuaHelper(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				ShibaInu.LuaHelper obj = new ShibaInu.LuaHelper();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: ShibaInu.LuaHelper.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsDebug(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			bool o = ShibaInu.LuaHelper.IsDebug();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetVersionInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			string o = ShibaInu.LuaHelper.GetVersionInfo();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendMessageToNative(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			ShibaInu.LuaHelper.SendMessageToNative(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DeviceVibrate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			ShibaInu.LuaHelper.DeviceVibrate(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Relaunch(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			ShibaInu.LuaHelper.Relaunch();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateGameObject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			string arg0 = ToLua.CheckString(L, 1);
			UnityEngine.Transform arg1 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 2);
			bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
			UnityEngine.GameObject o = ShibaInu.LuaHelper.CreateGameObject(arg0, arg1, arg2);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetLayerRecursively(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			ShibaInu.LuaHelper.SetLayerRecursively(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DestroyChildren(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 1);
			ShibaInu.LuaHelper.DestroyChildren(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WorldToCanvasPoint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 o = ShibaInu.LuaHelper.WorldToCanvasPoint(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ScreenToCanvasPoint(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
				UnityEngine.Vector3 o = ShibaInu.LuaHelper.ScreenToCanvasPoint(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2)
			{
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
				UnityEngine.RectTransform arg1 = (UnityEngine.RectTransform)ToLua.CheckObject(L, 2, typeof(UnityEngine.RectTransform));
				UnityEngine.Vector3 o = ShibaInu.LuaHelper.ScreenToCanvasPoint(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ShibaInu.LuaHelper.ScreenToCanvasPoint");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetShader(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			UnityEngine.Shader o = ShibaInu.LuaHelper.GetShader(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddOrGetComponent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 1, typeof(UnityEngine.GameObject));
			System.Type arg1 = ToLua.CheckMonoType(L, 2);
			UnityEngine.Component o = ShibaInu.LuaHelper.AddOrGetComponent(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMarkPointGameObject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 1, typeof(UnityEngine.GameObject));
			string arg1 = ToLua.CheckString(L, 2);
			UnityEngine.GameObject o = ShibaInu.LuaHelper.GetMarkPointGameObject(arg0, arg1);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendHttpRequest(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			string arg0 = ToLua.CheckString(L, 1);
			LuaFunction arg1 = ToLua.CheckLuaFunction(L, 2);
			string arg2 = ToLua.CheckString(L, 3);
			ShibaInu.HttpRequest o = ShibaInu.LuaHelper.SendHttpRequest(arg0, arg1, arg2);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddDestroyEvent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 1, typeof(UnityEngine.GameObject));
			LuaTable arg1 = ToLua.CheckLuaTable(L, 2);
			ShibaInu.LuaHelper.AddDestroyEvent(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddPointerEvent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 1, typeof(UnityEngine.GameObject));
			LuaTable arg1 = ToLua.CheckLuaTable(L, 2);
			ShibaInu.LuaHelper.AddPointerEvent(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddDragDropEvent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 1, typeof(UnityEngine.GameObject));
			LuaTable arg1 = ToLua.CheckLuaTable(L, 2);
			ShibaInu.LuaHelper.AddDragDropEvent(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddAvailabilityEvent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 1, typeof(UnityEngine.GameObject));
			LuaTable arg1 = ToLua.CheckLuaTable(L, 2);
			ShibaInu.LuaHelper.AddAvailabilityEvent(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddTriggerEvent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 1, typeof(UnityEngine.GameObject));
			LuaTable arg1 = ToLua.CheckLuaTable(L, 2);
			ShibaInu.LuaHelper.AddTriggerEvent(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayDoubleImageShake(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
				ShibaInu.DoubleImageShake o = ShibaInu.LuaHelper.PlayDoubleImageShake(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2)
			{
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
				LuaFunction arg1 = ToLua.CheckLuaFunction(L, 2);
				ShibaInu.DoubleImageShake o = ShibaInu.LuaHelper.PlayDoubleImageShake(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
				LuaFunction arg1 = ToLua.CheckLuaFunction(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				ShibaInu.DoubleImageShake o = ShibaInu.LuaHelper.PlayDoubleImageShake(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4)
			{
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
				LuaFunction arg1 = ToLua.CheckLuaFunction(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				ShibaInu.DoubleImageShake o = ShibaInu.LuaHelper.PlayDoubleImageShake(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 5)
			{
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
				LuaFunction arg1 = ToLua.CheckLuaFunction(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				ShibaInu.DoubleImageShake o = ShibaInu.LuaHelper.PlayDoubleImageShake(arg0, arg1, arg2, arg3, arg4);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 6)
			{
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
				LuaFunction arg1 = ToLua.CheckLuaFunction(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				UnityEngine.Camera arg5 = (UnityEngine.Camera)ToLua.CheckObject(L, 6, typeof(UnityEngine.Camera));
				ShibaInu.DoubleImageShake o = ShibaInu.LuaHelper.PlayDoubleImageShake(arg0, arg1, arg2, arg3, arg4, arg5);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ShibaInu.LuaHelper.PlayDoubleImageShake");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayMosaic(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				ShibaInu.Mosaic o = ShibaInu.LuaHelper.PlayMosaic(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				LuaFunction arg2 = ToLua.CheckLuaFunction(L, 3);
				ShibaInu.Mosaic o = ShibaInu.LuaHelper.PlayMosaic(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4)
			{
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				LuaFunction arg2 = ToLua.CheckLuaFunction(L, 3);
				UnityEngine.Camera arg3 = (UnityEngine.Camera)ToLua.CheckObject(L, 4, typeof(UnityEngine.Camera));
				ShibaInu.Mosaic o = ShibaInu.LuaHelper.PlayMosaic(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ShibaInu.LuaHelper.PlayMosaic");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayRadialBlur(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				ShibaInu.RadialBlur o = ShibaInu.LuaHelper.PlayRadialBlur(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				LuaFunction arg2 = ToLua.CheckLuaFunction(L, 3);
				ShibaInu.RadialBlur o = ShibaInu.LuaHelper.PlayRadialBlur(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4)
			{
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				LuaFunction arg2 = ToLua.CheckLuaFunction(L, 3);
				UnityEngine.Camera arg3 = (UnityEngine.Camera)ToLua.CheckObject(L, 4, typeof(UnityEngine.Camera));
				ShibaInu.RadialBlur o = ShibaInu.LuaHelper.PlayRadialBlur(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ShibaInu.LuaHelper.PlayRadialBlur");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetGaussianBlurEnabled(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
				ShibaInu.GaussianBlur o = ShibaInu.LuaHelper.SetGaussianBlurEnabled(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2)
			{
				bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				ShibaInu.GaussianBlur o = ShibaInu.LuaHelper.SetGaussianBlurEnabled(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				ShibaInu.GaussianBlur o = ShibaInu.LuaHelper.SetGaussianBlurEnabled(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4)
			{
				bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				ShibaInu.GaussianBlur o = ShibaInu.LuaHelper.SetGaussianBlurEnabled(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 5)
			{
				bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.Camera arg4 = (UnityEngine.Camera)ToLua.CheckObject(L, 5, typeof(UnityEngine.Camera));
				ShibaInu.GaussianBlur o = ShibaInu.LuaHelper.SetGaussianBlurEnabled(arg0, arg1, arg2, arg3, arg4);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ShibaInu.LuaHelper.SetGaussianBlurEnabled");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

