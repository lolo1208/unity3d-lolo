//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ShibaInu_ScrollListWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(ShibaInu.ScrollList), typeof(ShibaInu.BaseList));
		L.RegFunction("SetViewportSize", SetViewportSize);
		L.RegFunction("GetViewportSize", GetViewportSize);
		L.RegFunction("SetContentSize", SetContentSize);
		L.RegFunction("SyncPropertys", SyncPropertys);
		L.RegFunction("ResetContentPosition", ResetContentPosition);
		L.RegFunction("ScrollToPosition", ScrollToPosition);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("luaTarget", null, set_luaTarget);
		L.RegVar("isVertical", get_isVertical, set_isVertical);
		L.RegVar("viewport", get_viewport, null);
		L.RegVar("scrollRect", get_scrollRect, null);
		L.RegVar("isAutoSize", get_isAutoSize, set_isAutoSize);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetViewportSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ShibaInu.ScrollList obj = (ShibaInu.ScrollList)ToLua.CheckObject<ShibaInu.ScrollList>(L, 1);
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			uint arg1 = (uint)LuaDLL.luaL_checknumber(L, 3);
			obj.SetViewportSize(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetViewportSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ShibaInu.ScrollList obj = (ShibaInu.ScrollList)ToLua.CheckObject<ShibaInu.ScrollList>(L, 1);
			UnityEngine.Vector2 o = obj.GetViewportSize();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetContentSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ShibaInu.ScrollList obj = (ShibaInu.ScrollList)ToLua.CheckObject<ShibaInu.ScrollList>(L, 1);
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			uint arg1 = (uint)LuaDLL.luaL_checknumber(L, 3);
			obj.SetContentSize(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SyncPropertys(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 6)
			{
				ShibaInu.ScrollList obj = (ShibaInu.ScrollList)ToLua.CheckObject<ShibaInu.ScrollList>(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				uint arg1 = (uint)LuaDLL.luaL_checknumber(L, 3);
				uint arg2 = (uint)LuaDLL.luaL_checknumber(L, 4);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 6);
				obj.SyncPropertys(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else if (count == 9)
			{
				ShibaInu.ScrollList obj = (ShibaInu.ScrollList)ToLua.CheckObject<ShibaInu.ScrollList>(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				uint arg1 = (uint)LuaDLL.luaL_checknumber(L, 3);
				uint arg2 = (uint)LuaDLL.luaL_checknumber(L, 4);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 6);
				bool arg5 = LuaDLL.luaL_checkboolean(L, 7);
				uint arg6 = (uint)LuaDLL.luaL_checknumber(L, 8);
				uint arg7 = (uint)LuaDLL.luaL_checknumber(L, 9);
				obj.SyncPropertys(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ShibaInu.ScrollList.SyncPropertys");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResetContentPosition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ShibaInu.ScrollList obj = (ShibaInu.ScrollList)ToLua.CheckObject<ShibaInu.ScrollList>(L, 1);
			obj.ResetContentPosition();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ScrollToPosition(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				ShibaInu.ScrollList obj = (ShibaInu.ScrollList)ToLua.CheckObject<ShibaInu.ScrollList>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				obj.ScrollToPosition(arg0);
				return 0;
			}
			else if (count == 3)
			{
				ShibaInu.ScrollList obj = (ShibaInu.ScrollList)ToLua.CheckObject<ShibaInu.ScrollList>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				obj.ScrollToPosition(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				ShibaInu.ScrollList obj = (ShibaInu.ScrollList)ToLua.CheckObject<ShibaInu.ScrollList>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				DG.Tweening.Ease arg2 = (DG.Tweening.Ease)ToLua.CheckObject(L, 4, typeof(DG.Tweening.Ease));
				obj.ScrollToPosition(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ShibaInu.ScrollList.ScrollToPosition");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isVertical(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ShibaInu.ScrollList obj = (ShibaInu.ScrollList)o;
			bool ret = obj.isVertical;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isVertical on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_viewport(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ShibaInu.ScrollList obj = (ShibaInu.ScrollList)o;
			UnityEngine.RectTransform ret = obj.viewport;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index viewport on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_scrollRect(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ShibaInu.ScrollList obj = (ShibaInu.ScrollList)o;
			UnityEngine.UI.ScrollRect ret = obj.scrollRect;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index scrollRect on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isAutoSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ShibaInu.ScrollList obj = (ShibaInu.ScrollList)o;
			bool ret = obj.isAutoSize;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isAutoSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_luaTarget(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ShibaInu.ScrollList obj = (ShibaInu.ScrollList)o;
			LuaTable arg0 = ToLua.CheckLuaTable(L, 2);
			obj.luaTarget = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index luaTarget on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isVertical(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ShibaInu.ScrollList obj = (ShibaInu.ScrollList)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.isVertical = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isVertical on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isAutoSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ShibaInu.ScrollList obj = (ShibaInu.ScrollList)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.isAutoSize = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isAutoSize on a nil value");
		}
	}
}

