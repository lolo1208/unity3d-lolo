//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ShibaInu_UpdateManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("UpdateManager");
		L.RegFunction("Extract", Extract);
		L.RegFunction("AbortExtract", AbortExtract);
		L.RegFunction("GetPatchPackagePath", GetPatchPackagePath);
		L.RegFunction("VerifyPatchPackage", VerifyPatchPackage);
		L.RegFunction("ClearCache", ClearCache);
		L.RegFunction("Repair", Repair);
		L.RegVar("STATE_EXTRACT_NONE", get_STATE_EXTRACT_NONE, null);
		L.RegVar("STATE_EXTRACTING", get_STATE_EXTRACTING, null);
		L.RegVar("STATE_EXTRACT_COMPLETED", get_STATE_EXTRACT_COMPLETED, null);
		L.RegVar("STATE_EXTRACT_ABORT", get_STATE_EXTRACT_ABORT, null);
		L.RegVar("STATE_EXTRACT_ERROR", get_STATE_EXTRACT_ERROR, null);
		L.RegVar("State", get_State, null);
		L.RegVar("Progress", get_Progress, null);
		L.RegVar("ErrorMessage", get_ErrorMessage, null);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Extract(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			ShibaInu.UpdateManager.Extract(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AbortExtract(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			ShibaInu.UpdateManager.AbortExtract();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPatchPackagePath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = ShibaInu.UpdateManager.GetPatchPackagePath(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int VerifyPatchPackage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			bool o = ShibaInu.UpdateManager.VerifyPatchPackage(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearCache(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			ShibaInu.UpdateManager.ClearCache();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Repair(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			bool o = ShibaInu.UpdateManager.Repair();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_STATE_EXTRACT_NONE(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, ShibaInu.UpdateManager.STATE_EXTRACT_NONE);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_STATE_EXTRACTING(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, ShibaInu.UpdateManager.STATE_EXTRACTING);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_STATE_EXTRACT_COMPLETED(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, ShibaInu.UpdateManager.STATE_EXTRACT_COMPLETED);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_STATE_EXTRACT_ABORT(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, ShibaInu.UpdateManager.STATE_EXTRACT_ABORT);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_STATE_EXTRACT_ERROR(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, ShibaInu.UpdateManager.STATE_EXTRACT_ERROR);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_State(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, ShibaInu.UpdateManager.State);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Progress(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, ShibaInu.UpdateManager.Progress);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ErrorMessage(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, ShibaInu.UpdateManager.ErrorMessage);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

