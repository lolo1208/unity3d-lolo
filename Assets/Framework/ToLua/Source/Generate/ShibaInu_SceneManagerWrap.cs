//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ShibaInu_SceneManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("SceneManager");
		L.RegFunction("LoadScene", LoadScene);
		L.RegFunction("UnloadScene", UnloadScene);
		L.RegFunction("UnloadAllScenes", UnloadAllScenes);
		L.RegFunction("SetActiveScene", SetActiveScene);
		L.RegFunction("GetProgress", GetProgress);
		L.RegFunction("SetDontUnloadAssetBundle", SetDontUnloadAssetBundle);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadScene(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				ShibaInu.SceneManager.LoadScene(arg0);
				return 0;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				ShibaInu.SceneManager.LoadScene(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ShibaInu.SceneManager.LoadScene");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnloadScene(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			ShibaInu.SceneManager.UnloadScene(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnloadAllScenes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			ShibaInu.SceneManager.UnloadAllScenes();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetActiveScene(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			bool o = ShibaInu.SceneManager.SetActiveScene(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetProgress(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			float o = ShibaInu.SceneManager.GetProgress();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetDontUnloadAssetBundle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
			ShibaInu.SceneManager.SetDontUnloadAssetBundle(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

